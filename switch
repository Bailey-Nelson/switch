#!/usr/bin/env bash

BASE_PATH="dev/github.com"
BASE_URL="git@github.com"
CONFIG_FILE=~/.bnswitch

# create a config file if it doesn't exist
[ ! -f "$CONFIG_FILE" ] && touch ~/.bnswitch

# function to clone and change directories
# $1 is org name, $2 is repo name
function switchToRepo {
  DIR=~/$BASE_PATH/$1/$2
  # clone repo if it doesn't exist locally
  [ ! -d $DIR ] && git clone $BASE_URL:$1/$2.git $DIR
  # change to local repo directory if clone was successful or already exists
  echo switching to \"$2\"
  [ -d $DIR ] && cd $DIR
}

# help text
function usage {
  echo -e "usage: switch [-h | --help] [-o | --org <organization>] <repo-name>"
  echo -e "examples:\n  $ switch looker-schema"
  echo -e "  $ switch --org bailey-nelson pipeline"
}

# specify and save github organization name
function setOrg {
  echo -n 'github org: '
  read org_name
  echo "org_name=$org_name" >> $CONFIG_FILE
  echo 'github organization set to "$org_name"'
}

# if no arguments
if [[ $# -eq 0 ]] ; then
  echo "ERROR: missing repo-name"
  usage
  exit 0
fi

# read arguments
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -h|--help)
  usage
  exit 0
  ;;
  -o|--org)
  ORGNAME="$2"
  shift
  shift
  ;;
  *)
  REPONAME="$1"
  shift
  ;;
esac
done

# set org_name if provided
if [ -n "$ORGNAME" ]; then
  echo "org_name=$ORGNAME" >> $CONFIG_FILE
  echo github organization set to \"$ORGNAME\"

  # switch
  [[ -n "$REPONAME" ]] && switchToRepo $ORGNAME $REPONAME

# otherwise read from file or ask for org name
else
  # read $org_name from config file
  source $CONFIG_FILE
  # set org_name if not provided or already set
  [[ -z "$org_name" ]] && setOrg

  # switch
  [[ -n "$REPONAME" ]] && switchToRepo $org_name $REPONAME
fi

# clean up
unset org_name
